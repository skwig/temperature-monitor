// Package endpoints provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package endpoints

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// IngestFromSensorRequest defines model for IngestFromSensorRequest.
type IngestFromSensorRequest struct {
	// Humidity Relative humidity in percentage
	Humidity   float32            `json:"humidity"`
	SensorTime time.Time          `json:"sensorTime"`
	Session    openapi_types.UUID `json:"session"`

	// Temperature Temperature in celsius
	Temperature float32 `json:"temperature"`
}

// TimeSeriesEntry defines model for TimeSeriesEntry.
type TimeSeriesEntry struct {
	// Humidity Relative humidity in percentage
	Humidity   float32            `json:"humidity"`
	SensorTime time.Time          `json:"sensorTime"`
	ServerTime time.Time          `json:"serverTime"`
	Session    openapi_types.UUID `json:"session"`

	// Temperature Temperature in celsius
	Temperature float32 `json:"temperature"`
}

// IngestFromSensorJSONRequestBody defines body for IngestFromSensor for application/json ContentType.
type IngestFromSensorJSONRequestBody = IngestFromSensorRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /grafana/timeseries)
	GetGrafanaTimeSeries(c *gin.Context)

	// (PUT /sensor/ingest)
	IngestFromSensor(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetGrafanaTimeSeries operation middleware
func (siw *ServerInterfaceWrapper) GetGrafanaTimeSeries(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGrafanaTimeSeries(c)
}

// IngestFromSensor operation middleware
func (siw *ServerInterfaceWrapper) IngestFromSensor(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.IngestFromSensor(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/grafana/timeseries", wrapper.GetGrafanaTimeSeries)
	router.PUT(options.BaseURL+"/sensor/ingest", wrapper.IngestFromSensor)
}

type GetGrafanaTimeSeriesRequestObject struct {
}

type GetGrafanaTimeSeriesResponseObject interface {
	VisitGetGrafanaTimeSeriesResponse(w http.ResponseWriter) error
}

type GetGrafanaTimeSeries200JSONResponse []TimeSeriesEntry

func (response GetGrafanaTimeSeries200JSONResponse) VisitGetGrafanaTimeSeriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type IngestFromSensorRequestObject struct {
	Body *IngestFromSensorJSONRequestBody
}

type IngestFromSensorResponseObject interface {
	VisitIngestFromSensorResponse(w http.ResponseWriter) error
}

type IngestFromSensor200Response struct {
}

func (response IngestFromSensor200Response) VisitIngestFromSensorResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /grafana/timeseries)
	GetGrafanaTimeSeries(ctx context.Context, request GetGrafanaTimeSeriesRequestObject) (GetGrafanaTimeSeriesResponseObject, error)

	// (PUT /sensor/ingest)
	IngestFromSensor(ctx context.Context, request IngestFromSensorRequestObject) (IngestFromSensorResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetGrafanaTimeSeries operation middleware
func (sh *strictHandler) GetGrafanaTimeSeries(ctx *gin.Context) {
	var request GetGrafanaTimeSeriesRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGrafanaTimeSeries(ctx, request.(GetGrafanaTimeSeriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGrafanaTimeSeries")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetGrafanaTimeSeriesResponseObject); ok {
		if err := validResponse.VisitGetGrafanaTimeSeriesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// IngestFromSensor operation middleware
func (sh *strictHandler) IngestFromSensor(ctx *gin.Context) {
	var request IngestFromSensorRequestObject

	var body IngestFromSensorJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.IngestFromSensor(ctx, request.(IngestFromSensorRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IngestFromSensor")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(IngestFromSensorResponseObject); ok {
		if err := validResponse.VisitIngestFromSensorResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
